blueprint:
  name: Zigbee2MQTT - TS004F_TZ3000_abrsvsou
  description: >
    Zigbee Smart knob
    Fork of the blueprint by pbergman (https://github.com/pbergman/ha-blueprints/blob/3fc7a18cd8ea34a82f5a955beea13c02a5f805d7/ERS-10TZBVK-AA.yaml).
    Adapted and modified to meet the provided set of features of this smart know model.
    Version 2025-06-01
  domain: automation
  input:
    mqtt_entity:
      description: The "friendly" TS004F device name as is registered in zigbee2mqtt
      name: Name
    base_topic:
      description: The base topic as defined in the zigbee2mqtt config
      default: zigbee2mqtt
      name: Base Topic
    state_entity:
      name: State
      selector:
        entity:
          domain: select
          integration: mqtt
          multiple: false

    event_single:
      name: Event | Single Press
      description: Action to run on single press in event mode
      default: []
      selector:
        action: {}
    event_double:
      name: Event | Double Press
      description: Action to run on double press in event mode
      default: []
      selector:
        action: {}
    event_hold:
      name: Event | Hold Press
      description: Action to run on hold press in event mode
      default: []
      selector:
        action: {}
    event_rotate_left:
      name: Event | Rotate Left
      description: Action to run on rotate left in event mode
      default: []
      selector:
        action: {}
    event_rotate_right:
      name: Event | Rotate Right
      description: Action to run on rotate right in event mode
      default: []
      selector:
        action: {}
    command_single:
      name: Command | Single Press
      description: Action to run on single press in command mode
      default: []
      selector:
        action: {}
    command_double:
      name: Command | Double Press
      description: Action to run on double press in command mode
      default: []
      selector:
        action: {}
    command_hold:
      name: Command | Hold Press
      description: Action to run on hold press in command mode
      default: []
      selector:
        action: {}
    command_rotate_left:
      name: Command | Rotate Left
      description: Action to run on rotate left in command mode
      default: []
      selector:
        action: {}
    command_rotate_right:
      name: Command | Rotate Right
      description: Action to run on rotate right in command mode
      default: []
      selector:
        action: {}
    switch_operation_mode_command:
      name: Change operation mode to command
      description: Action to run when changing to operation mode command (3 presses)
      default: []
      selector:
        action: { }
    switch_operation_mode_event:
      name: Change operation mode to event
      description: Action to run when changing to operation mode event (3 presses)
      default: []
      selector:
        action: {}

mode: single
max_exceeded: silent

trigger_variables:
  mqtt_entity: !input mqtt_entity
  base_topic:  !input base_topic

trigger:
  - platform: mqtt
    topic: "{{ base_topic  ~ '/' ~ mqtt_entity ~ '/action' }}"
  - platform: state
    entity_id: !input "state_entity"
    
### Event
# single
# double
# hold                        // > 10 sec hold
# rotate_left
# rotate_right
########################
### Command
# single
# double
# hold                        // > 10 sec hold
# rotate_left
# rotate_right

action:
  - variables:
      platform: "{{ trigger.platform }}"
      payload:  "{% if trigger.to_state|default(false,true) %}{{ trigger.to_state.state }}{% else %}{{ trigger.payload }}{% endif %}"
  - choose:
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'single' and state_entity == 'event' }}"
        sequence: !input "event_single"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'double' and state_entity == 'event' }}"
        sequence: !input "event_double"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'hold' and state_entity == 'event' }}"
        sequence: !input "event_hold"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'rotate_left' and state_entity == 'event' }}"
        sequence: !input "event_rotate_left"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'rotate_right' and state_entity == 'event' }}"
        sequence: !input "event_rotate_right"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'single' and state_entity == 'command' }}"
        sequence: !input "command_single"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'double' and state_entity == 'command' }}"
        sequence: !input "command_double"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'hold' and state_entity == 'command' }}"
        sequence: !input "command_hold"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'rotate_left' and state_entity == 'command' }}"
        sequence: !input "command_rotate_left"
      - conditions:
          - "{{ platform == 'mqtt' and payload == 'rotate_right' and state_entity == 'command' }}"
        sequence: !input "command_rotate_right"
      - conditions:
          - "{{ platform == 'state' and payload == 'command' }}"
        sequence: !input "switch_operation_mode_command"
      - conditions:
          - "{{ platform == 'state' and payload == 'event' }}"
        sequence: !input "switch_operation_mode_event"
